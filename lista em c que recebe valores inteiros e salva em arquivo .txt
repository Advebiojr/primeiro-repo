#include <stdio.h>   // Inclui a biblioteca padrão de entrada e saída
#include <stdlib.h>  // Inclui a biblioteca padrão para funções utilitárias
#include <locale.h>  // Inclui a biblioteca para configuração de localidade

#define MAX_TAM 5   // Define a constante MAX_TAM como 5, que é o tamanho máximo da lista

// Declaração de variáveis globais
int lista[MAX_TAM], tamanho = MAX_TAM, menu, t = 0; // 'lista' é um vetor que armazena os números, 't' é o contador de elementos

// Função para inserir um número na lista
void insere() {
    int a; // Variável para armazenar o número a ser inserido
    if (t == tamanho) { // Verifica se a lista está cheia
        printf("\n--- Lista cheia ---\n");
    } else {
        printf("\nDigite um número a ser inserido na lista: ");
        scanf("%d", &a); // Lê o número do usuário
        lista[t] = a; // Adiciona o número à lista na posição atual 't'
        t++; // Incrementa o contador de elementos
    }
}

// Função para exibir um elemento específico da lista
void elemento() {
    int posicao; // Variável para armazenar a posição do elemento desejado
    if (t == 0) { // Verifica se a lista está vazia
        printf("\n--- Lista vazia ---\n");
    } else {
        printf("\nEm qual posição da lista está o elemento que deseja visualizar? ");
        scanf("%d", &posicao); // Lê a posição desejada do usuário
        posicao--; // Ajuste para índice zero-base (o usuário insere 1, mas o vetor começa em 0)
        if (posicao < 0 || posicao >= t) { // Verifica se a posição é válida
            printf("\n--- Posição inexistente ---\n");
        } else {
            printf("\n--- Elemento: %d ---\n", lista[posicao]); // Exibe o elemento na posição informada
        }
    }
}

// Função para exibir todos os elementos da lista
void exibe() {
	int i; // Variável para iteração
    if (t == 0) { // Verifica se a lista está vazia
        printf("\n--- Lista vazia ---\n");
    } else {
        printf("\n--- Lista ---\n");
        for (i = 0; i < t; i++) { // Itera sobre os elementos da lista
            printf(" %d ", lista[i]); // Exibe cada elemento
        }
        printf("\n");
    }
}

// Função para remover o último elemento da lista
void retirar() {
    if (t == 0) { // Verifica se a lista está vazia
        printf("\n--- Lista vazia ---\n");
    } else {
        printf("\n--- Último elemento removido: %d ---\n", lista[t - 1]); // Exibe o último elemento que será removido
        t--; // Decrementa o contador de elementos, efetivamente removendo o último elemento
    }
}

// Função para salvar os dados da lista em um arquivo texto
void salvar() {
	int i; // Variável para iteração
    FILE *arquivo = fopen("lista.txt", "w"); // Abre (ou cria) um arquivo chamado "lista.txt" em modo de escrita
    if (arquivo == NULL) { // Verifica se houve erro ao abrir o arquivo
        printf("\nErro ao abrir o arquivo para salvar.\n");
        return;
    }
    for (i = 0; i < t; i++) { // Itera sobre os elementos da lista e os escreve no arquivo
        fprintf(arquivo, "%d\n", lista[i]);
    }
    fclose(arquivo); // Fecha o arquivo após escrever os dados
    printf("\n--- Lista salva com sucesso ---\n");
}

// Função para carregar dados da lista a partir de um arquivo texto
void carregar() {
    FILE *arquivo = fopen("lista.txt", "r"); // Abre o arquivo "lista.txt" em modo de leitura
    if (arquivo == NULL) { // Verifica se houve erro ao abrir o arquivo
        printf("\nErro ao abrir o arquivo para carregar.\n");
        return;
    }
    t = 0; // Reinicia o contador de elementos antes de carregar os dados
    while (fscanf(arquivo, "%d", &lista[t]) != EOF && t < tamanho) { 
        t++; // Lê os números do arquivo e adiciona à lista até que não haja mais números ou até atingir o tamanho máximo da lista.
    }
    fclose(arquivo); // Fecha o arquivo após ler os dados.
    printf("\n--- Lista carregada com sucesso ---\n");
}

// Função principal do programa
int main() {
    setlocale(LC_ALL, ""); // Configura a localidade para suportar caracteres especiais em português.
    
    do {
        // Exibe as opções do menu ao usuário.
        printf("\n0 - Reiniciar Lista");
        printf("\n1 - Inserir número na Lista");
        printf("\n2 - Exibir Lista");
        printf("\n3 - Exibir tamanho da Lista");
        printf("\n4 - Exibir um elemento da Lista");
        printf("\n5 - Limpar último elemento da lista");
        printf("\n6 - Salvar dados");
        printf("\n7 - Carregar lista");
        printf("\n8 - Sair");
        
        printf("\nDigite uma opção: ");
        scanf("%d", &menu); // Lê a opção escolhida pelo usuário.

        switch (menu) { 
            case 0:
                t = 0; // Reinicia a lista ao definir 't' como zero.
                printf("\n--- Lista reiniciada ---\n");
                break;
            case 1:
                insere(); // Chama a função para inserir um número na lista.
                break;
            case 2:
                exibe(); // Chama a função para exibir todos os elementos da lista.
                break;
            case 3:
                printf("\n--- Tamanho da lista: %d ---\n", t); // Exibe o tamanho atual da lista.
                break;
            case 4:
                elemento(); // Chama a função para exibir um elemento específico da lista.
                break;
            case 5:
                retirar(); // Chama a função para remover o último elemento da lista.
                break;
            case 6:
                salvar(); // Chama a função para salvar os dados da lista em um arquivo.
                break;
            case 7:
                carregar(); // Chama a função para carregar dados da lista de um arquivo.
                break;
            case 8:
                break; // Sai do loop e encerra o programa.
            default:
                printf("\n--- Opção inválida ---\n"); // Mensagem de erro caso uma opção inválida seja escolhida.
                break;
        }
    } while (menu != 8); // Continua executando enquanto o usuário não escolher sair.

    printf("\nPrograma encerrado.\n"); 
    return 0; 
}

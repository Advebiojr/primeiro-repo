class Loja {
    // Vetores para armazenar os produtos no estoque e no carrinho
    val estoque = mutableListOf<Pair<String, String>>() // Estoque de produtos (nome, pre√ßo)
    val carrinho = mutableListOf<Pair<String, String>>() // Carrinho de compras (nome, pre√ßo)

    // Fun√ß√£o para exibir o menu de op√ß√µes da loja
    fun menu() {
        var opcao: Int

        do {
            // Exibe o menu de op√ß√µes
            println("\nMenu da Loja:")
            println("1. Adicionar produtos ao estoque")
            println("2. Ver estoque")
            println("3. Buscar produto")
            println("4. Adicionar ao carrinho")
            println("5. Ver carrinho")
            println("6. Finalizar compra")
            println("0. Sair")
            print("Escolha uma op√ß√£o: ")

            // L√™ a op√ß√£o escolhida pelo usu√°rio
            opcao = readLine()?.toIntOrNull() ?: -1

            // Chama a fun√ß√£o correspondente √† op√ß√£o escolhida
            when (opcao) {
                1 -> adicionarProdutos()
                2 -> mostrarEstoque()
                3 -> buscarProduto()
                4 -> adicionarAoCarrinho()
                5 -> mostrarCarrinho()
                6 -> finalizarCompra()
                0 -> println("Encerrando o programa.")
                else -> println("Op√ß√£o inv√°lida.")
            }

        } while (opcao != 0) // Continua at√© que o usu√°rio escolha sair
    }

    // Fun√ß√£o para adicionar produtos ao estoque
    fun adicionarProdutos() {
        // Pergunta ao usu√°rio quantos produtos deseja adicionar
        println("Quantos produtos deseja adicionar?")
        val qtd = readLine()?.toIntOrNull() ?: return println("N√∫mero inv√°lido.")

        for (i in 1..qtd) { // Loop para adicionar a quantidade especificada de produtos
            // L√™ o nome do produto
            println("Nome do produto $i:")
            val nome = readLine() ?: "Desconhecido"

            // L√™ o pre√ßo do produto
            println("Pre√ßo do produto:")
            val preco = readLine() ?: "0.00"

            // Adiciona o nome e pre√ßo ao estoque como um par
            estoque.add(Pair(nome, preco))
        }
    }

    // Fun√ß√£o para mostrar os produtos dispon√≠veis no estoque
    fun mostrarEstoque() {
        if (estoque.isEmpty()) { // Verifica se o estoque est√° vazio
            println("Estoque vazio.")
        } else {
            println("\n Produtos no estoque:")
            for ((nome, preco) in estoque) { // Itera sobre os produtos no estoque
                println("$nome: R$ $preco") // Exibe cada produto com seu pre√ßo
            }
        }
    }

    // Fun√ß√£o para buscar um produto espec√≠fico no estoque
    fun buscarProduto() {
        println("\nProdutos no estoque:")
        for ((nome, preco) in estoque) { // Mostra todos os produtos dispon√≠veis
            println("$nome: R$ $preco")
        }
        println("Digite o nome do produto para buscar:")
        val nomeBusca = readLine() ?: ""

        // Busca o produto pelo nome ignorando mai√∫sculas/min√∫sculas
        val encontrado = estoque.find { it.first.equals(nomeBusca, ignoreCase = true) }

        if (encontrado != null) { // Se o produto foi encontrado, exibe suas informa√ß√µes
            println("Produto encontrado: ${encontrado.first}: R$ ${encontrado.second}")
        } else {
            println("Produto n√£o encontrado.") // Caso contr√°rio, informa que n√£o foi encontrado
        }
    }

    // Fun√ß√£o para adicionar um produto ao carrinho de compras
    fun adicionarAoCarrinho() {
        println("\n Produtos no estoque:")
        for ((nome, preco) in estoque) { // Mostra todos os produtos dispon√≠veis no estoque
            println("$nome: R$ $preco")
        }
        println("Digite o nome do produto que deseja adicionar ao carrinho:")
        val nomeCarrinho = readLine() ?: ""

        // Busca o produto pelo nome ignorando mai√∫sculas/min√∫sculas
        val produto = estoque.find { it.first.equals(nomeCarrinho, ignoreCase = true) }

        if (produto != null) { // Se o produto foi encontrado, adiciona ao carrinho
            carrinho.add(produto)
            println("Adicionado ao carrinho: ${produto.first}: R$ ${produto.second}")
        } else {
            println("Produto n√£o encontrado no estoque.") // Caso contr√°rio, informa que n√£o foi encontrado
        }
    }

    // Fun√ß√£o para mostrar os produtos no carrinho de compras
    fun mostrarCarrinho() {
        if (carrinho.isEmpty()) { // Verifica se o carrinho est√° vazio
            println("Carrinho vazio.")
        } else {
            println("\nüõí Produtos no carrinho:")
            for ((nome, preco) in carrinho) { // Itera sobre os produtos no carrinho e exibe suas informa√ß√µes
                println("$nome: R$ $preco")
            }
        }
    }

    // Fun√ß√£o para finalizar a compra e calcular o total a ser pago
    fun finalizarCompra() {
        if (carrinho.isEmpty()) { // Verifica se h√° produtos no carrinho antes de finalizar a compra
            println("Carrinho vazio. Nada para comprar.")
            return
        }

        var total = 0.0
        for ((_, preco) in carrinho) { // Soma os pre√ßos dos produtos no carrinho para calcular o total
            total += preco.toDoubleOrNull() ?: 0.0
        }

        // Exibe o valor total da compra e esvazia o carrinho ap√≥s a finaliza√ß√£o da compra
        println("\nüßæ Compra finalizada. Valor total: R$ %.2f".format(total))
        carrinho.clear()
    }
}

fun main(){
    val pessoa = Loja()
    pessoa.menu()
}
